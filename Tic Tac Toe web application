<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: yellow;
        }

        .container {
            text-align: center;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            gap: 10px;
            margin: 20px auto;
            
        }

        .cell {
            width: 100px;
            height: 100px;
            border: 2px solid black;
            font-size: 3em;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            
        }

        .cell-X {
            color: blue;
        }

        .cell-O {
            color: red;
        }

        #turn-message {
            font-size: 1.5em;
            margin-bottom: 10px;
        }

        #reset-button {
            font-size: 1em;
            padding: 10px 20px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
        }

        #reset-button:hover {
            background-color: green;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Tic Tac Toe</h1>
        <div id="board" class="board">
            <!-- The game board will be generated dynamically using JavaScript -->
        </div>
        <p id="turn-message">Player X's turn</p>
        <button id="reset-button">Reset Game</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const board = document.getElementById('board');
            const resetButton = document.getElementById('reset-button');
            const turnMessage = document.getElementById('turn-message');

            let currentPlayer = 'X';
            let gameActive = true;
            let gameState = ['', '', '', '', '', '', '', '', ''];

            const winningConditions = [
                [0, 1, 2],
                [3, 4, 5],
                [6, 7, 8],
                [0, 3, 6],
                [1, 4, 7],
                [2, 5, 8],
                [0, 4, 8],
                [2, 4, 6]
            ];

            function handleCellClick(clickedCellEvent) {
                const clickedCell = clickedCellEvent.target;
                const clickedCellIndex = parseInt(clickedCell.getAttribute('data-cell-index'));

                if (gameState[clickedCellIndex] !== '' || !gameActive) {
                    return;
                }

                gameState[clickedCellIndex] = currentPlayer;
                clickedCell.textContent = currentPlayer;
                clickedCell.classList.add(`cell-${currentPlayer}`);

                if (checkWin()) {
                    turnMessage.textContent = `${currentPlayer} wins!`;
                    gameActive = false;
                    return;
                }

                if (checkDraw()) {
                    turnMessage.textContent = 'It\'s a draw!';
                    gameActive = false;
                    return;
                }

                currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
                turnMessage.textContent = `Player ${currentPlayer}'s turn`;
            }

            function checkWin() {
                return winningConditions.some((condition) => {
                    return condition.every((index) => {
                        return gameState[index] === currentPlayer;
                    });
                });
            }

            function checkDraw() {
                return gameState.every((cell) => {
                    return cell !== '';
                });
            }

            function restartGame() {
                currentPlayer = 'X';
                gameActive = true;
                gameState = ['', '', '', '', '', '', '', '', ''];
                turnMessage.textContent = `Player ${currentPlayer}'s turn`;

                document.querySelectorAll('.cell').forEach((cell) => {
                    cell.textContent = '';
                    cell.classList.remove('cell-X', 'cell-O');
                });
            }

            resetButton.addEventListener('click', restartGame);

            // Generate the game board cells
            for (let i = 0; i < 9; i++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.setAttribute('data-cell-index', i);
                cell.addEventListener('click', handleCellClick);
                board.appendChild(cell);
            }
        });
    </script>
</body>
</html>
